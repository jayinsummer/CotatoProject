{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\nexport const createRequestActionTypes = type => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return function* (action) {\n    yield put(startLoading(type)); //로딩 시작\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true\n      });\n    }\n    yield put(finishLoading(type)); //로딩 끝\n  };\n}","map":{"version":3,"names":["call","put","startLoading","finishLoading","createRequestActionTypes","type","SUCCESS","FAILURE","createRequestSaga","request","action","response","payload","data","e","error"],"sources":["C:/Users/JYUN/Desktop/새 폴더 (21)/CotatoProject/frontend/src/lib/createRequestSaga.js"],"sourcesContent":["import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\n\r\nexport const createRequestActionTypes = type => {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n    return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n\r\n    return function*(action) {\r\n        yield put(startLoading(type)); //로딩 시작\r\n        try {\r\n            const response = yield call(request, action.payload);\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: response.data,\r\n            });\r\n        } catch (e) {\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true,\r\n            })\r\n        }\r\n        yield put(finishLoading(type)); //로딩 끝\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,QAAQ,oBAAoB;AAC9C,SAASC,YAAY,EAAEC,aAAa,QAAQ,oBAAoB;AAEhE,OAAO,MAAMC,wBAAwB,GAAGC,IAAI,IAAI;EAC5C,MAAMC,OAAO,GAAI,GAAED,IAAK,UAAS;EACjC,MAAME,OAAO,GAAI,GAAEF,IAAK,UAAS;EACjC,OAAO,CAACA,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;AACnC,CAAC;AAED,eAAe,SAASC,iBAAiB,CAACH,IAAI,EAAEI,OAAO,EAAE;EACrD,MAAMH,OAAO,GAAI,GAAED,IAAK,UAAS;EACjC,MAAME,OAAO,GAAI,GAAEF,IAAK,UAAS;EAEjC,OAAO,WAAUK,MAAM,EAAE;IACrB,MAAMT,GAAG,CAACC,YAAY,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAI;MACA,MAAMM,QAAQ,GAAG,MAAMX,IAAI,CAACS,OAAO,EAAEC,MAAM,CAACE,OAAO,CAAC;MACpD,MAAMX,GAAG,CAAC;QACNI,IAAI,EAAEC,OAAO;QACbM,OAAO,EAAED,QAAQ,CAACE;MACtB,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,CAAC,EAAE;MACR,MAAMb,GAAG,CAAC;QACNI,IAAI,EAAEE,OAAO;QACbK,OAAO,EAAEE,CAAC;QACVC,KAAK,EAAE;MACX,CAAC,CAAC;IACN;IACA,MAAMd,GAAG,CAACE,aAAa,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}