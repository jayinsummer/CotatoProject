{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from \"redux-saga/effects\";\nconst INITIALIZE = 'write/INITIALIZE'; //게시글의 상태값을 초기화하도록하는 액션타입\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //각 input의 변화되는 값을 저장하도록 하는 액션타입\nconst [\n//게시글 저장을 위한 액션 타입\nWRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST');\nexport const initialize = createAction(INITIALIZE); //initialize라는 변수명으로 액션을 생성하고, 해당 액션을 사용하면 write의 state값이 초기화됩니다.\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    //changeField라는 변수명으로 액션을 생성하고 write의 변수들에 맞는 key, value값을 인자로 받아 저장하도록 합니다.\n    key,\n    value\n  };\n});\n// writePost라는 이름으로 액션을 만들고, 게시글 저장에 필요한 값을 받아 저장함\n\nexport const writePost = createAction(WRITE_POST, _ref2 => {\n  let {\n    userId,\n    postType,\n    category,\n    rentalPrice,\n    title,\n    content,\n    date,\n    writer,\n    images\n  } = _ref2;\n  return {\n    userId,\n    postType,\n    category,\n    rentalPrice,\n    title,\n    content,\n    date,\n    writer,\n    images\n  };\n});\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.write); //액션 타입과 api 요청을 담아 사가를 생성합니다.\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n}\nconst initialState = {\n  userId: '',\n  postType: '',\n  category: '',\n  rentalPrice: null,\n  title: '',\n  content: '',\n  date: null,\n  writer: '',\n  images: null,\n  post: null,\n  postError: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, _ref3) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref3;\n    return {\n      ...state,\n      [key]: value\n    };\n  },\n  [WRITE_POST]: state => ({\n    ...state,\n    post: null,\n    postError: null\n  }),\n  [WRITE_POST_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: post\n    } = _ref4;\n    return {\n      ...state,\n      post\n    };\n  },\n  [WRITE_POST_FAILURE]: (state, _ref5) => {\n    let {\n      payload: postError\n    } = _ref5;\n    return {\n      ...state,\n      postError\n    };\n  }\n}, initialState);\nexport default write;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","initialize","changeField","key","value","writePost","userId","postType","category","rentalPrice","title","content","date","writer","images","writePostSaga","write","writeSaga","initialState","post","postError","state","payload"],"sources":["C:/Users/JYUN/Desktop/새 폴더 (21)/CotatoProject/frontend/src/modules/write.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n    createRequestActionTypes\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; //게시글의 상태값을 초기화하도록하는 액션타입\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; //각 input의 변화되는 값을 저장하도록 하는 액션타입\r\nconst [ //게시글 저장을 위한 액션 타입\r\n    WRITE_POST,\r\n    WRITE_POST_SUCCESS,\r\n    WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST');\r\n\r\nexport const initialize = createAction(INITIALIZE); //initialize라는 변수명으로 액션을 생성하고, 해당 액션을 사용하면 write의 state값이 초기화됩니다.\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({ //changeField라는 변수명으로 액션을 생성하고 write의 변수들에 맞는 key, value값을 인자로 받아 저장하도록 합니다.\r\n    key,\r\n    value\r\n}));\r\n// writePost라는 이름으로 액션을 만들고, 게시글 저장에 필요한 값을 받아 저장함\r\n\r\nexport const writePost = createAction(WRITE_POST, ({\r\n    userId,\r\n    postType,\r\n    category,\r\n    rentalPrice,\r\n    title,\r\n    content,\r\n    date,\r\n    writer,\r\n    images\r\n}) => ({\r\n    userId,\r\n    postType,\r\n    category,\r\n    rentalPrice,\r\n    title,\r\n    content,\r\n    date,\r\n    writer,\r\n    images\r\n}));\r\n\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.write); //액션 타입과 api 요청을 담아 사가를 생성합니다.\r\nexport function* writeSaga() {\r\n    yield takeLatest(WRITE_POST, writePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    userId: '',\r\n    postType: '',\r\n    category: '',\r\n    rentalPrice: null,\r\n    title: '',\r\n    content: '',\r\n    date: null,\r\n    writer: '',\r\n    images: null,\r\n    post: null,\r\n    postError: null,\r\n};\r\n\r\nconst write = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState,\r\n        [CHANGE_FIELD]: (state, { payload: { key, value }}) => ({\r\n            ...state,\r\n            [key]: value,\r\n        }),\r\n        [WRITE_POST]: state => ({\r\n            ...state,\r\n            post: null,\r\n            postError: null,\r\n        }),\r\n        [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n            ...state,\r\n            postError,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default write;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,eAAe;AAC3D,OAAOC,iBAAiB,IACpBC,wBAAwB,QACrB,0BAA0B;AACjC,OAAO,KAAKC,QAAQ,MAAM,kBAAkB;AAC5C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,MAAMC,UAAU,GAAG,kBAAkB,CAAC,CAAC;AACvC,MAAMC,YAAY,GAAG,oBAAoB,CAAC,CAAC;AAC3C,MAAM;AAAE;AACJC,UAAU,EACVC,kBAAkB,EAClBC,kBAAkB,CACrB,GAAGP,wBAAwB,CAAC,kBAAkB,CAAC;AAEhD,OAAO,MAAMQ,UAAU,GAAGX,YAAY,CAACM,UAAU,CAAC,CAAC,CAAC;AACpD,OAAO,MAAMM,WAAW,GAAGZ,YAAY,CAACO,YAAY,EAAE;EAAA,IAAC;IAAEM,GAAG;IAAEC;EAAM,CAAC;EAAA,OAAM;IAAE;IACzED,GAAG;IACHC;EACJ,CAAC;AAAA,CAAC,CAAC;AACH;;AAEA,OAAO,MAAMC,SAAS,GAAGf,YAAY,CAACQ,UAAU,EAAE;EAAA,IAAC;IAC/CQ,MAAM;IACNC,QAAQ;IACRC,QAAQ;IACRC,WAAW;IACXC,KAAK;IACLC,OAAO;IACPC,IAAI;IACJC,MAAM;IACNC;EACJ,CAAC;EAAA,OAAM;IACHR,MAAM;IACNC,QAAQ;IACRC,QAAQ;IACRC,WAAW;IACXC,KAAK;IACLC,OAAO;IACPC,IAAI;IACJC,MAAM;IACNC;EACJ,CAAC;AAAA,CAAC,CAAC;AAEH,MAAMC,aAAa,GAAGvB,iBAAiB,CAACM,UAAU,EAAEJ,QAAQ,CAACsB,KAAK,CAAC,CAAC,CAAC;AACrE,OAAO,UAAUC,SAAS,GAAG;EACzB,MAAMtB,UAAU,CAACG,UAAU,EAAEiB,aAAa,CAAC;AAC/C;AAEA,MAAMG,YAAY,GAAG;EACjBZ,MAAM,EAAE,EAAE;EACVC,QAAQ,EAAE,EAAE;EACZC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE,IAAI;EACjBC,KAAK,EAAE,EAAE;EACTC,OAAO,EAAE,EAAE;EACXC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,IAAI;EACZK,IAAI,EAAE,IAAI;EACVC,SAAS,EAAE;AACf,CAAC;AAED,MAAMJ,KAAK,GAAGzB,aAAa,CACvB;EACI,CAACK,UAAU,GAAGyB,KAAK,IAAIH,YAAY;EACnC,CAACrB,YAAY,GAAG,CAACwB,KAAK;IAAA,IAAE;MAAEC,OAAO,EAAE;QAAEnB,GAAG;QAAEC;MAAM;IAAC,CAAC;IAAA,OAAM;MACpD,GAAGiB,KAAK;MACR,CAAClB,GAAG,GAAGC;IACX,CAAC;EAAA,CAAC;EACF,CAACN,UAAU,GAAGuB,KAAK,KAAK;IACpB,GAAGA,KAAK;IACRF,IAAI,EAAE,IAAI;IACVC,SAAS,EAAE;EACf,CAAC,CAAC;EACF,CAACrB,kBAAkB,GAAG,CAACsB,KAAK;IAAA,IAAE;MAAEC,OAAO,EAAEH;IAAK,CAAC;IAAA,OAAM;MACjD,GAAGE,KAAK;MACRF;IACJ,CAAC;EAAA,CAAC;EACF,CAACnB,kBAAkB,GAAG,CAACqB,KAAK;IAAA,IAAE;MAAEC,OAAO,EAAEF;IAAU,CAAC;IAAA,OAAM;MACtD,GAAGC,KAAK;MACRD;IACJ,CAAC;EAAA;AACL,CAAC,EACDF,YAAY,CACf;AAED,eAAeF,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}