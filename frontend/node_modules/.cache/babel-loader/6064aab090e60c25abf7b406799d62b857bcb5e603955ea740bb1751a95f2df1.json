{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\n// 액션 타입 정의\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] = createRequestActionTypes('POSTS/LIST_POSTS');\n\n// 액션 생성 함수\nexport const listPosts = createAction(LIST_POSTS, _ref => {\n  let {\n    tag,\n    username,\n    page\n  } = _ref;\n  return {\n    tag,\n    username,\n    page\n  };\n});\n\n// 사가 생성\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\n//초기 상태 설정\n\nconst initialState = {\n  posts: null,\n  error: null,\n  lastPage: 1\n};\n\n// 리듀서 함수\n\nconst posts = handleActions({\n  [LIST_POSTS_SUCCESS]: (state, _ref2) => {\n    let {\n      payload: posts\n    } = _ref2;\n    return {\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 10) //문자열을 숫자로 변환함\n    };\n  },\n\n  [LIST_POSTS_FAILURE]: (state, _ref3) => {\n    let {\n      payload: error\n    } = _ref3;\n    return {\n      ...state,\n      error\n    };\n  }\n}, initialState);\nexport default posts;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","tag","username","page","listPostsSaga","postsSaga","initialState","posts","error","lastPage","state","payload","parseInt","response","headers"],"sources":["C:/Users/JYUN/Desktop/새 폴더 (21)/CotatoProject/frontend/src/modules/posts.js"],"sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\n\r\n    import createRequestSaga, {\r\n      createRequestActionTypes,\r\n    } from '../lib/createRequestSaga';\r\n\r\n    import * as postsAPI from '../lib/api/posts';\r\n    import { takeLatest } from 'redux-saga/effects';\r\n\r\n    // 액션 타입 정의\r\n    const [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] =\r\n      createRequestActionTypes('POSTS/LIST_POSTS');\r\n\r\n    // 액션 생성 함수\r\n    export const listPosts = createAction(\r\n      LIST_POSTS,\r\n      ({ tag, username, page }) => ({ tag, username, page }),\r\n    );\r\n\r\n    // 사가 생성\r\n    const listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\n    export function* postsSaga() {\r\n      yield takeLatest(LIST_POSTS, listPostsSaga);\r\n    }\r\n\r\n    //초기 상태 설정\r\n\r\n    const initialState = {\r\n      posts: null,\r\n      error: null,\r\n      lastPage: 1,\r\n    };\r\n\r\n    // 리듀서 함수\r\n\r\n    const posts = handleActions(\r\n      {\r\n        [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\r\n          ...state,\r\n          posts,\r\n          lastPage: parseInt(response.headers['last-page'], 10), //문자열을 숫자로 변환함\r\n        }),\r\n        [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n          ...state,\r\n          error,\r\n        }),\r\n      },\r\n      initialState,\r\n    );\r\n\r\n    export default posts;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,eAAe;AAEvD,OAAOC,iBAAiB,IACtBC,wBAAwB,QACnB,0BAA0B;AAEjC,OAAO,KAAKC,QAAQ,MAAM,kBAAkB;AAC5C,SAASC,UAAU,QAAQ,oBAAoB;;AAE/C;AACA,MAAM,CAACC,UAAU,EAAEC,kBAAkB,EAAEC,kBAAkB,CAAC,GACxDL,wBAAwB,CAAC,kBAAkB,CAAC;;AAE9C;AACA,OAAO,MAAMM,SAAS,GAAGT,YAAY,CACnCM,UAAU,EACV;EAAA,IAAC;IAAEI,GAAG;IAAEC,QAAQ;IAAEC;EAAK,CAAC;EAAA,OAAM;IAAEF,GAAG;IAAEC,QAAQ;IAAEC;EAAK,CAAC;AAAA,CAAC,CACvD;;AAED;AACA,MAAMC,aAAa,GAAGX,iBAAiB,CAACI,UAAU,EAAEF,QAAQ,CAACK,SAAS,CAAC;AACvE,OAAO,UAAUK,SAAS,GAAG;EAC3B,MAAMT,UAAU,CAACC,UAAU,EAAEO,aAAa,CAAC;AAC7C;;AAEA;;AAEA,MAAME,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE;AACZ,CAAC;;AAED;;AAEA,MAAMF,KAAK,GAAGf,aAAa,CACzB;EACE,CAACM,kBAAkB,GAAG,CAACY,KAAK;IAAA,IAAE;MAAEC,OAAO,EAAEJ;IAAM,CAAC;IAAA,OAAM;MACpD,GAAGG,KAAK;MACRH,KAAK;MACLE,QAAQ,EAAEG,QAAQ,CAACC,QAAQ,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC,CAAE;IACzD,CAAC;EAAA,CAAC;;EACF,CAACf,kBAAkB,GAAG,CAACW,KAAK;IAAA,IAAE;MAAEC,OAAO,EAAEH;IAAM,CAAC;IAAA,OAAM;MACpD,GAAGE,KAAK;MACRF;IACF,CAAC;EAAA;AACH,CAAC,EACDF,YAAY,CACb;AAED,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}