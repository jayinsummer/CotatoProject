{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JYUN\\\\Desktop\\\\\\uC0C8 \\uD3F4\\uB354 (21)\\\\CotatoProject\\\\frontend\\\\src\\\\containers\\\\posts\\\\PostListContainer.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PostList from '../../components/posts/PostList';\nimport { listPosts } from '../../modules/posts';\nimport { useEffect } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\n// withRouter 로 location 객체 접근 가능\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostListContainer = () => {\n  _s();\n  const {\n    username\n  } = useParams();\n  const [searchParams] = useSearchParams();\n  const dispatch = useDispatch();\n  const {\n    posts,\n    error,\n    loading,\n    user\n  } = useSelector(_ref => {\n    let {\n      posts,\n      loading,\n      user\n    } = _ref;\n    return {\n      posts: posts.posts,\n      error: posts.error,\n      loading: loading['posts/LIST_POSTS'],\n      user: user.user\n    };\n  });\n  useEffect(() => {\n    //   location.search ? 뒤의 쿼리스트링을 값으로 하는 DOMstring.\n    const tag = searchParams.get('tag');\n    //page가 없으면 1을 기본값으로 사용\n    const page = parseInt(searchParams.get('page'), 10) || 1;\n    dispatch(listPosts({\n      tag,\n      username,\n      page\n    }));\n  }, [dispatch, searchParams, username]);\n  return /*#__PURE__*/_jsxDEV(PostList, {\n    loading: loading,\n    error: error,\n    posts: posts\n    //   user 객체가 유효할 때 (user 객체는 현재 로그인 중인 사용자의 정보를 가지고 있음 .)\n    ,\n    showWriteButton: user\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(PostListContainer, \"vKXI5mEVUD5Gh5CT37ZEDS3M9ak=\", false, function () {\n  return [useParams, useSearchParams, useDispatch, useSelector];\n});\n_c = PostListContainer;\nexport default PostListContainer;\nvar _c;\n$RefreshReg$(_c, \"PostListContainer\");","map":{"version":3,"names":["React","useSelector","useDispatch","PostList","listPosts","useEffect","useParams","useSearchParams","PostListContainer","username","searchParams","dispatch","posts","error","loading","user","tag","get","page","parseInt"],"sources":["C:/Users/JYUN/Desktop/새 폴더 (21)/CotatoProject/frontend/src/containers/posts/PostListContainer.js"],"sourcesContent":["import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PostList from '../../components/posts/PostList';\r\nimport { listPosts } from '../../modules/posts';\r\nimport { useEffect } from 'react';\r\nimport { useParams, useSearchParams  } from 'react-router-dom';\r\n\r\n\r\n// withRouter 로 location 객체 접근 가능\r\nconst PostListContainer = () => {\r\n  const {username} = useParams();\r\n  const [searchParams] = useSearchParams();\r\n  const dispatch = useDispatch();\r\n  const { posts, error, loading, user } = useSelector(\r\n    ({ posts, loading, user }) => ({\r\n      posts: posts.posts,\r\n      error: posts.error,\r\n      loading: loading['posts/LIST_POSTS'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    //   location.search ? 뒤의 쿼리스트링을 값으로 하는 DOMstring.\r\n    const tag = searchParams.get('tag');\r\n    //page가 없으면 1을 기본값으로 사용\r\n    const page = parseInt(searchParams.get('page'), 10) || 1;\r\n    dispatch(listPosts({tag, username, page}));\r\n  }, [dispatch, searchParams, username]);\r\n\r\n  return (\r\n    <PostList\r\n      loading={loading}\r\n      error={error}\r\n      posts={posts}\r\n    //   user 객체가 유효할 때 (user 객체는 현재 로그인 중인 사용자의 정보를 가지고 있음 .)\r\n      showWriteButton={user}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PostListContainer;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,QAAQ,MAAM,iCAAiC;AACtD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,SAAS,EAAEC,eAAe,QAAS,kBAAkB;;AAG9D;AAAA;AACA,MAAMC,iBAAiB,GAAG,MAAM;EAAA;EAC9B,MAAM;IAACC;EAAQ,CAAC,GAAGH,SAAS,EAAE;EAC9B,MAAM,CAACI,YAAY,CAAC,GAAGH,eAAe,EAAE;EACxC,MAAMI,QAAQ,GAAGT,WAAW,EAAE;EAC9B,MAAM;IAAEU,KAAK;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGd,WAAW,CACjD;IAAA,IAAC;MAAEW,KAAK;MAAEE,OAAO;MAAEC;IAAK,CAAC;IAAA,OAAM;MAC7BH,KAAK,EAAEA,KAAK,CAACA,KAAK;MAClBC,KAAK,EAAED,KAAK,CAACC,KAAK;MAClBC,OAAO,EAAEA,OAAO,CAAC,kBAAkB,CAAC;MACpCC,IAAI,EAAEA,IAAI,CAACA;IACb,CAAC;EAAA,CAAC,CACH;EAEDV,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,GAAG,GAAGN,YAAY,CAACO,GAAG,CAAC,KAAK,CAAC;IACnC;IACA,MAAMC,IAAI,GAAGC,QAAQ,CAACT,YAAY,CAACO,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC;IACxDN,QAAQ,CAACP,SAAS,CAAC;MAACY,GAAG;MAAEP,QAAQ;MAAES;IAAI,CAAC,CAAC,CAAC;EAC5C,CAAC,EAAE,CAACP,QAAQ,EAAED,YAAY,EAAED,QAAQ,CAAC,CAAC;EAEtC,oBACE,QAAC,QAAQ;IACP,OAAO,EAAEK,OAAQ;IACjB,KAAK,EAAED,KAAM;IACb,KAAK,EAAED;IACT;IAAA;IACE,eAAe,EAAEG;EAAK;IAAA;IAAA;IAAA;EAAA,QACtB;AAEN,CAAC;AAAC,GA9BIP,iBAAiB;EAAA,QACFF,SAAS,EACLC,eAAe,EACrBL,WAAW,EACYD,WAAW;AAAA;AAAA,KAJ/CO,iBAAiB;AAgCvB,eAAeA,iBAAiB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}