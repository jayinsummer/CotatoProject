{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from \"redux-saga/effects\";\nconst INITIALIZE = 'comment/INITIALIZE';\nconst CHANGE_FIELD = 'comment/CHANGE_FIELD';\nconst [COMMENT, COMMENT_SUCCESS, COMMENT_FAILURE] = createRequestActionTypes('comment/WRITE_COMMENT');\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const write = createAction(COMMENT, _ref2 => {\n  let {\n    comment,\n    writer,\n    postId\n  } = _ref2;\n  return {\n    comment,\n    writer,\n    postId\n  };\n});\nconst writeSaga = createRequestSaga(COMMENT, postsAPI.writeComment);\nexport function* writeCommentSaga() {\n  yield takeLatest(COMMENT, writeSaga);\n}\nconst initialState = {\n  comment: '',\n  writer: '',\n  postId: '',\n  success: '',\n  failure: ''\n};\nconst writeComment = handleActions({\n  [INITIALIZE]: state => initialState,\n  [CHANGE_FIELD]: (state, _ref3) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref3;\n    return {\n      ...state,\n      [key]: value\n    };\n  },\n  [COMMENT]: state => ({\n    ...state,\n    success: null,\n    failure: null\n  }),\n  [COMMENT_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: success\n    } = _ref4;\n    return {\n      ...state,\n      success\n    };\n  },\n  [COMMENT_FAILURE]: (state, _ref5) => {\n    let {\n      payload: failure\n    } = _ref5;\n    return {\n      ...state,\n      failure\n    };\n  }\n}, initialState);\nexport default writeComment;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","COMMENT","COMMENT_SUCCESS","COMMENT_FAILURE","initialize","changeField","key","value","write","comment","writer","postId","writeSaga","writeComment","writeCommentSaga","initialState","success","failure","state","payload"],"sources":["C:/Users/JYUN/Desktop/새 폴더 (21)/CotatoProject/frontend/src/modules/writeComment.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n    createRequestActionTypes\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from \"redux-saga/effects\";\r\n\r\nconst INITIALIZE = 'comment/INITIALIZE';\r\nconst CHANGE_FIELD = 'comment/CHANGE_FIELD';\r\nconst [\r\n    COMMENT,\r\n    COMMENT_SUCCESS,\r\n    COMMENT_FAILURE,\r\n] = createRequestActionTypes('comment/WRITE_COMMENT');\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n    key,\r\n    value\r\n}));\r\nexport const write = createAction(COMMENT, ({\r\n    comment,\r\n    writer,\r\n    postId\r\n}) => ({\r\n    comment,\r\n    writer,\r\n    postId\r\n}));\r\n\r\nconst writeSaga = createRequestSaga(COMMENT, postsAPI.writeComment);\r\nexport function* writeCommentSaga() {\r\n    yield takeLatest(COMMENT, writeSaga);\r\n}\r\n\r\nconst initialState = {\r\n    comment: '',\r\n    writer: '',\r\n    postId: '',\r\n    success: '',\r\n    failure: '',\r\n};\r\n\r\nconst writeComment = handleActions(\r\n    {\r\n        [INITIALIZE]: state => initialState,\r\n        [CHANGE_FIELD]: (state, { payload: { key, value }}) => ({\r\n            ...state,\r\n            [key]: value,\r\n        }),\r\n        [COMMENT]: state => ({\r\n            ...state,\r\n            success: null,\r\n            failure: null,\r\n        }),\r\n        [COMMENT_SUCCESS]: (state, { payload: success }) => ({\r\n            ...state,\r\n            success,\r\n        }),\r\n        [COMMENT_FAILURE]: (state, { payload: failure }) => ({\r\n            ...state,\r\n            failure,\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default writeComment;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,eAAe;AAC3D,OAAOC,iBAAiB,IACpBC,wBAAwB,QACrB,0BAA0B;AACjC,OAAO,KAAKC,QAAQ,MAAM,kBAAkB;AAC5C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,MAAMC,UAAU,GAAG,oBAAoB;AACvC,MAAMC,YAAY,GAAG,sBAAsB;AAC3C,MAAM,CACFC,OAAO,EACPC,eAAe,EACfC,eAAe,CAClB,GAAGP,wBAAwB,CAAC,uBAAuB,CAAC;AAErD,OAAO,MAAMQ,UAAU,GAAGX,YAAY,CAACM,UAAU,CAAC;AAClD,OAAO,MAAMM,WAAW,GAAGZ,YAAY,CAACO,YAAY,EAAE;EAAA,IAAC;IAAEM,GAAG;IAAEC;EAAM,CAAC;EAAA,OAAM;IACvED,GAAG;IACHC;EACJ,CAAC;AAAA,CAAC,CAAC;AACH,OAAO,MAAMC,KAAK,GAAGf,YAAY,CAACQ,OAAO,EAAE;EAAA,IAAC;IACxCQ,OAAO;IACPC,MAAM;IACNC;EACJ,CAAC;EAAA,OAAM;IACHF,OAAO;IACPC,MAAM;IACNC;EACJ,CAAC;AAAA,CAAC,CAAC;AAEH,MAAMC,SAAS,GAAGjB,iBAAiB,CAACM,OAAO,EAAEJ,QAAQ,CAACgB,YAAY,CAAC;AACnE,OAAO,UAAUC,gBAAgB,GAAG;EAChC,MAAMhB,UAAU,CAACG,OAAO,EAAEW,SAAS,CAAC;AACxC;AAEA,MAAMG,YAAY,GAAG;EACjBN,OAAO,EAAE,EAAE;EACXC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE,EAAE;EACVK,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE;AACb,CAAC;AAED,MAAMJ,YAAY,GAAGnB,aAAa,CAC9B;EACI,CAACK,UAAU,GAAGmB,KAAK,IAAIH,YAAY;EACnC,CAACf,YAAY,GAAG,CAACkB,KAAK;IAAA,IAAE;MAAEC,OAAO,EAAE;QAAEb,GAAG;QAAEC;MAAM;IAAC,CAAC;IAAA,OAAM;MACpD,GAAGW,KAAK;MACR,CAACZ,GAAG,GAAGC;IACX,CAAC;EAAA,CAAC;EACF,CAACN,OAAO,GAAGiB,KAAK,KAAK;IACjB,GAAGA,KAAK;IACRF,OAAO,EAAE,IAAI;IACbC,OAAO,EAAE;EACb,CAAC,CAAC;EACF,CAACf,eAAe,GAAG,CAACgB,KAAK;IAAA,IAAE;MAAEC,OAAO,EAAEH;IAAQ,CAAC;IAAA,OAAM;MACjD,GAAGE,KAAK;MACRF;IACJ,CAAC;EAAA,CAAC;EACF,CAACb,eAAe,GAAG,CAACe,KAAK;IAAA,IAAE;MAAEC,OAAO,EAAEF;IAAQ,CAAC;IAAA,OAAM;MACjD,GAAGC,KAAK;MACRD;IACJ,CAAC;EAAA;AACL,CAAC,EACDF,YAAY,CACf;AAED,eAAeF,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}