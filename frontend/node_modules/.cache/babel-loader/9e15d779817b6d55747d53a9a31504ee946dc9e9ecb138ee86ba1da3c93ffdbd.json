{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\nimport React from \"react\";\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN');\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    form,\n    key,\n    value\n  } = _ref;\n  return {\n    form,\n    // register , login\n    key,\n    // username, password, passwordConfirm\n    value // 실제 바꾸려는 값\n  };\n});\n\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register/login\nexport const register = createAction(REGISTER, _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return {\n    username,\n    password\n  };\n});\nexport const login = createAction(LOGIN, _ref3 => {\n  let {\n    username,\n    password\n  } = _ref3;\n  return {\n    username,\n    password\n  };\n});\n\n// 사가 생성\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  auth: null,\n  authError: null\n};\nconst auth = handleActions({\n  [CHANGE_FIELD]: (state, _ref4) => {\n    let {\n      payload: {\n        form,\n        key,\n        value\n      }\n    } = _ref4;\n    return produce(state, draft => {\n      draft[form][key] = value; // 예: state.register.username을 바꾼다.\n    });\n  },\n\n  [INITIALIZE_FORM]: (state, _ref5) => {\n    let {\n      payload: form\n    } = _ref5;\n    return {\n      ...state,\n      [form]: initialState[form],\n      authError: null // 폼 전환 시 회원 인증 에러 초기화\n    };\n  },\n\n  // 회원가입 성공\n  [REGISTER_SUCCESS]: (state, _ref6) => {\n    let {\n      payload: auth\n    } = _ref6;\n    return {\n      ...state,\n      authError: null,\n      auth\n    };\n  },\n  // 회원가입 실패\n  [REGISTER_FAILURE]: (state, _ref7) => {\n    let {\n      payload: error\n    } = _ref7;\n    return {\n      ...state,\n      authError: error\n    };\n  },\n  // 로그인 성공\n  [LOGIN_SUCCESS]: (state, _ref8) => {\n    let {\n      payload: auth\n    } = _ref8;\n    return {\n      ...state,\n      authError: null,\n      auth\n    };\n  },\n  // 로그인 실패\n  [LOGIN_FAILURE]: (state, _ref9) => {\n    let {\n      payload: error\n    } = _ref9;\n    return {\n      ...state,\n      authError: error\n    };\n  }\n}, initialState);\nexport default auth;","map":{"version":3,"names":["createAction","handleActions","produce","takeLatest","createRequestSaga","createRequestActionTypes","authAPI","React","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","authSaga","initialState","passwordConfirm","auth","authError","state","payload","draft","error"],"sources":["C:/Users/JYUN/Desktop/새 폴더 (21)/CotatoProject/frontend/src/modules/auth.js"],"sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport React from \"react\";\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  'auth/REGISTER',\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  'auth/LOGIN',\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value, // 실제 바꾸려는 값\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register/login\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password,\r\n}));\r\n\r\n// 사가 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, draft => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다.\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default auth;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}