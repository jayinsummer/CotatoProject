{"ast":null,"code":"import client from './client';\n// post create\nexport const writePost = _ref => {\n  let {\n    title,\n    body,\n    tags\n  } = _ref;\n  return client.post('/api/posts', {\n    title,\n    body,\n    tags\n  });\n};\n\n// post read id 값 가져오기 위해서 backtic 사용\nexport const readPost = id => client.get(`/api/posts/${id}`);\n\n// post list api with qs\nexport const listPosts = _ref2 => {\n  let {\n    page,\n    username,\n    tag\n  } = _ref2;\n  return client.get(`/api/posts`, {\n    params: {\n      page,\n      username,\n      tag\n    }\n  });\n};\n\n// update api\nexport const updatePost = _ref3 => {\n  let {\n    id,\n    title,\n    body,\n    tags\n  } = _ref3;\n  return client.patch(`/api/posts/${id}`, {\n    title,\n    body,\n    tags\n  });\n};\n\n//delete api\nexport const removePost = id => client.delete(`/api/posts/${id}`);\nexport const write = _ref4 => {\n  let {\n    userId,\n    postType,\n    category,\n    title,\n    content,\n    rentalPrice,\n    date,\n    writer,\n    images\n  } = _ref4;\n  if (postType === '빌려주세요') {\n    const formData = new FormData();\n    formData.append('userId', userId);\n    formData.append('postType', postType);\n    formData.append('title', title);\n    formData.append('content', content);\n    formData.append('writer', writer);\n    client.post('/post-service/write', formData);\n  } else {\n    const formData = new FormData();\n    formData.append('userId', userId);\n    formData.append('category', category);\n    formData.append('images', images);\n    formData.append('type', type);\n    formData.append('title', title);\n    formData.append('content', content);\n    formData.append('rentalPrice', rentalPrice);\n    formData.append('date', date);\n    formData.append('writer', writer);\n    images.forEach(image => formData.append(\"images\", image));\n    client.post('/post-service/write', formData);\n  }\n};\nconst submitVote = () => {\n  axios.post(\"localhost:3306/cotato\", {\n    PartyA: voteForA,\n    P\n  });\n};\naxios.post(\"url\", {\n  username: \"\",\n  password: \"\"\n}).then(function (response) {\n  // response\n}).catch(function (error) {\n  // 오류발생시 실행\n}).then(function () {\n  // 항상 실행\n});\n\n// async await 함수를 사용할 때,\n\ntry {\n  const data = await axios.post(\"url\");\n} catch {\n  // 오류 발생시 실행\n}\nexport const readAllPosts = () => client.get('/post-service');\nexport const readPostsByStatus = status => client.get(`/post-service/posts/status/${status}`);\nexport const readPostById = id => client.get();\nexport const readPostsByUserId = userId => client.get(`/post-service/${userId}/posts`);\nexport const readPostsByCategory = category => client.get(`/post-service/category/${category}`);\nexport const readPostsByKeyword = keyword => client.get(`/post-service/keyword/${keyword}`);\nexport const deletePost = id => client.get(`/post-service/${id}/delete`);\nexport const writeComment = _ref5 => {\n  let {\n    id,\n    comment\n  } = _ref5;\n  return client.post(`/post-service/${id}/comments`, comment);\n};\nexport const deleteComment = id => client.delete(`/post-service/${id}/comments`);","map":{"version":3,"names":["client","writePost","title","body","tags","post","readPost","id","get","listPosts","page","username","tag","params","updatePost","patch","removePost","delete","write","userId","postType","category","content","rentalPrice","date","writer","images","formData","FormData","append","type","forEach","image","submitVote","axios","PartyA","voteForA","P","password","then","response","catch","error","data","readAllPosts","readPostsByStatus","status","readPostById","readPostsByUserId","readPostsByCategory","readPostsByKeyword","keyword","deletePost","writeComment","comment","deleteComment"],"sources":["C:/Users/JYUN/Desktop/새 폴더 (21)/CotatoProject/frontend/src/lib/api/posts.js"],"sourcesContent":["import client from './client';\r\n// post create\r\nexport const writePost = ({ title, body, tags }) =>\r\n  client.post('/api/posts', { title, body, tags });\r\n\r\n// post read id 값 가져오기 위해서 backtic 사용\r\nexport const readPost = (id) => client.get(`/api/posts/${id}`);\r\n\r\n// post list api with qs\r\nexport const listPosts = ({ page, username, tag }) => {\r\n  return client.get(`/api/posts`,{\r\n    params: {page, username, tag},\r\n  });\r\n};\r\n\r\n// update api\r\nexport const updatePost = ({ id, title, body, tags }) =>\r\n  client.patch(`/api/posts/${id}`, { title, body, tags });\r\n\r\n//delete api\r\nexport const removePost = id => client.delete(`/api/posts/${id}`);\r\n\r\nexport const write = ({\r\n    userId,\r\n    postType,\r\n    category,\r\n    title,\r\n    content,\r\n    rentalPrice,\r\n    date,\r\n    writer,\r\n    images\r\n}) => {\r\n    if(postType === '빌려주세요') {\r\n        const formData = new FormData();\r\n\r\n        formData.append('userId', userId);\r\n        formData.append('postType', postType);\r\n        formData.append('title', title);\r\n        formData.append('content', content);\r\n        formData.append('writer', writer);\r\n\r\n        client.post('/post-service/write', formData);\r\n    } else {\r\n        const formData = new FormData();\r\n\r\n        formData.append('userId', userId);\r\n        formData.append('category', category);\r\n        formData.append('images', images);\r\n        formData.append('type', type);\r\n        formData.append('title', title);\r\n        formData.append('content', content);\r\n        formData.append('rentalPrice', rentalPrice);\r\n        formData.append('date', date);\r\n        formData.append('writer', writer);\r\n        images.forEach((image) => formData.append(\"images\", image));\r\n\r\n        client.post('/post-service/write', formData);\r\n    }\r\n}\r\n\r\nconst submitVote = () => {\r\n    axios\r\n    .post(\"localhost:3306/cotato\",\r\n    {\r\n            PartyA: voteForA,\r\n            P\r\n\r\n    })\r\n}\r\n\r\naxios.post(\"url\", {\r\n        username: \"\",\r\n        password: \"\"\r\n    })\r\n    .then(function (response) {\r\n         // response\r\n    }).catch(function (error) {\r\n        // 오류발생시 실행\r\n    }).then(function() {\r\n        // 항상 실행\r\n    });\r\n\r\n// async await 함수를 사용할 때,\r\n\r\ntry {\r\n\tconst data = await axios.post(\"url\");\r\n} catch {\r\n\t// 오류 발생시 실행\r\n}\r\nexport const readAllPosts = () => client.get('/post-service');\r\n\r\nexport const readPostsByStatus = status => client.get(`/post-service/posts/status/${status}`)\r\n\r\nexport const readPostById = id => client.get();\r\n\r\nexport const readPostsByUserId = userId => client.get(`/post-service/${userId}/posts`);\r\n\r\nexport const readPostsByCategory = category => client.get(`/post-service/category/${category}`);\r\n\r\nexport const readPostsByKeyword = keyword => client.get(`/post-service/keyword/${keyword}`);\r\n\r\nexport const deletePost = id => client.get(`/post-service/${id}/delete`);\r\n\r\nexport const writeComment = ({ id, comment }) => client.post(`/post-service/${id}/comments`, comment);\r\n\r\nexport const deleteComment = id => client.delete(`/post-service/${id}/comments`);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}